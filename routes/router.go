package routes

import (
	"context"
	"mixindev/api/v1/article"
	"mixindev/api/v1/category"
	"mixindev/api/v1/menu"
	"mixindev/api/v1/role"
	"mixindev/api/v1/tag"
	"mixindev/api/v1/user"
	"mixindev/middleware"
	"mixindev/model"
	"mixindev/api/sd"
	"net/http"

	_ "mixindev/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	"github.com/gin-gonic/gin"
)

var userHandler *user.UserHandler

func InitRouter(r *gin.Engine, mw ...gin.HandlerFunc) *gin.Engine {

	ctx := context.Background()
	// Middlewares
	r.Use(gin.Recovery())
	r.Use(middleware.NoCache)
	r.Use(middleware.Options)
	r.Use(middleware.Secure)
	r.Use(mw...)
	// 404 Handler
	r.NoRoute(func(c *gin.Context) {
		c.String(http.StatusNotFound, "The incorrect API router.")
	})

	//swagger api 文档
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	r.POST("v1/login", user.Login)

	r.GET("v1/auth/userinfo", user.GetUseInfo)
	// r.Use(middleware.AuthMiddleware())

	userHandler = user.NewUserHandler(ctx, model.RedisClient)
	rUser := r.Group("v1/user")
	//auth 
	// rUser.Use(middleware.AuthMiddleware())
	{
		// 登录鉴权后获取用户信息
		rUser.POST("/add", userHandler.AddUser)
		rUser.GET("/:id", userHandler.GetUserById)
		rUser.GET("", userHandler.ListUsers)
		rUser.DELETE("/:id", userHandler.DeleteUser)
		rUser.PUT("/:id", userHandler.UpdateUserById)
	}
	
	//文章相关
	rArticle := r.Group("v1/article")
	// rArticle.Use(middleware.AuthMiddleware())
	{
		rArticle.GET("/:id", article.GetArticleById)
		rArticle.GET("", article.GetArticlesList)
		rArticle.DELETE("/:id", article.DeleteArticle)
		rArticle.POST("/add", article.AddArticle)
		rArticle.PUT(":id",article.UpdateArticleById)
	}

	rCategory := r.Group("v1/category")
	// rCategory.Use(middleware.AuthMiddleware()
	{
		rCategory.POST("/add", category.AddCategory)
		rCategory.GET("", category.ListCategories)
		rCategory.DELETE("/:id", category.DeleteCategory)
		rCategory.GET("/:id", category.GetCategoryById)
	}

	rTag := r.Group("v1/tag")
	// rTag.Use(middleware.AuthMiddleware()
	{
		rTag.POST("/add", tag.AddTag)
		rTag.GET("", tag.ListTags)
		rTag.DELETE("/:id", tag.DeleteTag)
		rTag.GET("/:id", tag.GetTagById)
	}

	rMenu := r.Group("v1/menu")
	// rMenu.Use(middleware.AuthMiddleware()
	{
		rMenu.POST("/add", menu.AddMenu)
		rMenu.GET("", menu.ListMenus)
		rMenu.DELETE("/:id", menu.DeleteMenu)
		rMenu.GET("/:id", menu.GetMenuById)
		rMenu.PUT("/:id", menu.UpdateMenuById)
	}

	rRole := r.Group("v1/role")
	// rRole.Use(middleware.AuthMiddleware()
	{
		rRole.POST("/add", role.AddRole)
		rRole.GET("", role.ListRoles)
		rRole.DELETE("/:id", role.DeleteRole)
		rRole.GET("/:id", role.GetRoleById)
		rRole.PUT("/:id", role.UpdateRole)
	}

	rSd := r.Group("sd")
	{
		rSd.GET("/health", sd.HealthCheck)
		rSd.GET("/disk", sd.DiskCheck)
		rSd.GET("/cpu", sd.CPUCheck)
		rSd.GET("/ram", sd.RAMCheck)
		rSd.GET("net",sd.NetCheck)
		rSd.GET("/host",sd.HostCheck)
	}

	return r
}
